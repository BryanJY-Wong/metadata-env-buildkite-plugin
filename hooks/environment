#!/bin/bash

set -euo pipefail

main() {
  echo "Reading meta-data ..."
  env_list=$(plugin_read_list | evaluate_key_item)

  echo "Exporting ${#env_list} bytes of env"
  set -a
  eval "$env_list"
  set +a
}

function plugin_read_list() {
  local prefix="BUILDKITE_PLUGIN_METADATA_ENV_KEYS"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  fi
}

function evaluate_key_item() {
  while IFS=$'\n' read -r key_item ; do
    read_meta_data "$key_item"
  done
}

function read_meta_data() {
  local key_item="$1"
  local value
  local meta_data_key
  local meta_data_key_alias
  local mapped_key
# Possible cases
# key_item="META;"
# key_item="META"
# key_item="meta=META"
# key_item="meta=META;"
# key_item="meta=META;data"
# key_item="META;data"

  command="$(echo "$key_item" | sed -n "s/^\([^=]*\)=\(.*\)/meta_data_key=\"\1\" env_def=\"\2\"/p;")"
  if [[ -z "$command" ]]; then
    meta_data_key="$(echo "$key_item" | sed -n "s/^\([^;]*\);.*/\1/p")"
    default_val="$(echo "$key_item" | sed -n "s/^[^;]*;\(.*$\)/\1/p")"
    meta_data_key="${meta_data_key:-$key_item}"
    mapped_key="$meta_data_key"
  else
    eval "$command"
    command="$(echo "$env_def" | sed -n "s/^\([^;]*\);\(.*\)/mapped_key=\"\1\" default_val=\"\2\"/p")"
    if [[ -z "$command" ]]; then default_val=""; else eval "$command"; fi
    mapped_key="${mapped_key:-$env_def}"
  fi

  eval "env=\"\${$mapped_key+\$$mapped_key}\""
  if [[ ! -z "$env" ]]; then return; fi # Environment variable exists, do not override

  value=$(buildkite-agent meta-data get "$meta_data_key" --default "$default_val")
  if [[ -z "$value" && "$key_item" != *\;* ]]; then 
    echo "Could not read meta-data: ${meta_data_key} and no default value supplied" >&2;
    exit 1
  fi

  echo "${mapped_key}=(${#value} chars)" >&2;
  echo "${mapped_key}=\"${value}\""
}

main