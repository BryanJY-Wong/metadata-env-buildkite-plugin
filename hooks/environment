#!/bin/bash

set -euo pipefail

main() {
  echo "Reading meta-data ..."
  env_list=$(plugin_read_list | evaluate_key_item)

  echo "Exporting ${#env_list} bytes of env"
  set -a
  eval "$env_list"
  set +a
}

function plugin_read_list() {
  local prefix="BUILDKITE_PLUGIN_METADATA_ENV_KEYS"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  fi
}

function split_key_item() {
  local key_item="$1"
  local meta_data_key
  local mapped_key
  local default_val

  meta_data_key="${item%%;*}" #remove everything after the first semicolon
  meta_data_key=" ${meta_data_key%%=*}" #remove everything after the first equal

  mapped_key="${item%%;*}" 
  mapped_key="${env#*=}" #remove everything before the first equal

  if [[ "$key_item" == *\;* ]]; then
    default_val="${item#*;}" #remove everything up to first semicolon
  else
    default_val=""
  fi

  echo "meta_data_key=\"$meta_data_key\" mapped_key=\"$mapped_key\" default_val=\"$default_val\""
}

function evaluate_key_item() {
  while IFS=$'\n' read -r key_item ; do
    read_meta_data "$key_item"
  done
}

function read_meta_data() {
  local key_item="$1"
  local meta_data_key
  local mapped_key
  local default_val
  local value

  eval "$(split_key_item "$key_item")"

  eval "env=\"\${$mapped_key+\$$mapped_key}\""
  if [[ ! -z "$env" ]]; then return; fi # Environment variable exists, do not override

  value=$(buildkite-agent meta-data get "$meta_data_key" --default "$default_val")
  if [[ -z "$value" && "$key_item" != *\;* ]]; then 
    echo "Could not read meta-data: ${meta_data_key} and no default value supplied" >&2;
    exit 1
  fi

  echo "${mapped_key}=${value}" >&2;
  echo "${mapped_key}=\"${value}\""
}

main